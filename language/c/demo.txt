内容节点
    -结构体元素
    -内存空间分配
    -二叉树
    -进程
    -大小端
    -图及其图顶点访问
    -hash_table
    -链表
    -分治法排序
    -优先队列
    -多线程编程
    
    详细内容：
        typedef struct JWImplementationArray{
            int size;
            int capacity;
            int *data;
        } JArray;

        malloc()
        realloc()
        memmove()
        assert()    //断言


        bst binary search

        typedef struct bst_node_t{
            int value;
            struct bst_node_t* left;
            struct bst_node_t* right;
        } bst_node;

        malloc()    //节点分配
        递归调用

        //大小端获取
        bool is_little_endian(){
            union{
                short number;
                char oneByte;
            } endianTest;

            endianTest.number = 1;
            return endianTest.oneByte;
        }


        int pid = fork();   //创建一个进程

        typedef struct{
            int v;  //vertex count，顶点数
            int e;  //edge count，边数

            struct neighbors{
                int length;
                int capacity;
                int list[];
            }* adjacency_list[];
        } UndirectedGraph;      //有向或无向图结构，无向图的关联性：两边都要添加

        /*
        *   访问图的元素，通过一个数组来标识是否被访问过
        */
        void ugraph_dfs(UndirectedGraph *g,int visited[],const int vertex)
        {
            visited[vertex] = 1;    //访问的顶点
            printf("%d -> ",vertex);

            for(int e=0;e<g->adjacency_list[vertex]->length;++e)
            {
                int u = g->adjacency_list[vertex]->list[e];
                if(visited[u] == 0) //没有被访问过的点
                {
                    ugraph_dfs(g,visited,u);
                }
            }
        }
        
        /*
        * hash table 哈希表
        */
        typedef struct KeyValue{
    		char* key;
			char* value;
			struct KeyValue* next;  //链表，解决key 冲突的问题
		}key_value;
			
		typedef struct HashTable{
			key_value** data;   //表结构，类似数组的形式
			int size;
		}hash_table;

        /**
        *   link 链表
        */
        typedef struct Node{
            int val;
            struct Node *next;
        } node_t;


        /**
        *   分治法排序
        */
        void merge(int numbers[],int low,int mid,int high)  //0 14 29
        {
            int b[high-low-1];
            int i=low;
            int j= mid+1;
            int k=0;

            //merge items from list in order
            while(i<= mid && j<= high)
            {
                if(numbers[i] <= numbers[j])
                {
                    b[k++] = numbers[i++];
                }else{
                    b[k++] = numbers[j++];
                }
            }

            //copy the remaining items to tmp JWImplementationArray
            while(i<= mid) b[k++] = numbers[i++];
            while(j<high) b[k++] = numbers[j++];

            --k;
            while(k>=0){
                numbers[low+k] =b[k];
                --k;
            }
        }   
        /**
        *   分治递归排序
        */
        void merge_sort(int numbers[],int low,int high)     //low:0  high:29
        {
            if(low < high)
            {
                int mid = (low+high)/2;
                merge_sort(numbers,low,mid);
                merge_sort(numbers,mid+1,high);
                merge_sort(numbers,low,mid,high);
            }
        }

        /**
        *   优先队列
        *       堆是优先级队列（Priority queue）的底层数据结构，较常使用优先级队列而非直接使用堆处理问题。
        *       堆可以用数组存储，插入、删除会触发节点 shift_down（下沉）、shift_up（上浮）操作，时间复杂度 O(logn)。
        *   堆排序：
        *       如果把数组塞进优先队列，再一个个删掉，那实际上按删掉的顺序就对数组排了个序，这种排序算法就是堆排序。这种算法自然地分为两步：
        *           1. 先把数组调整成符合堆顺序，即构造堆
        *           2. 每次把 a[1]和a[N--]交换，当 N 减到 1 时也就排好了序。
        */
        typedef struct MaxHeap{
            int size;
            int elements[kQueueCapacity+1];
            int capacity;
        } MaxHeap;	//大堆

        void shift_up(MaxHeap* heap,int i)
        {
            int temp;
            int parent;
            while(i>1)
            {
                parent = i/2;
                if(heap->elements[parent] < heap->elements[i])
                {
                    temp = heap->elements[i];
                    heap->elements[i] = heap->elements[parent];
                    heap->elements[parent] = temp;
                }
                i = parent;
            }
        }

        void sift_down(MaxHeap* heap,int index)
        {
            int i= index;
            int swap_index;

            while(i*2<=heap->size)
            {
                int left_child_index = 2*i;
                int right_child_index = 2*i+1;
                bool has_left = (left_child_index <= heap->size);
                bool has_right = (right_child_index <= heap->size);

                if(has_left && has_right)
                {
                    int left_child_value = heap->elements[left_child_index];
                    int right_child_value = heap->elements[right_child_index];

                    if(left_child_value > right_child_value)
                    {
                        swap_index = left_child_index;
                    }else{
                        swap_index = right_child_index;
                    }
                }else if(has_left)
                {
                    swap_index = left_child_index;
                }else if(has_right)
                {
                    swap_index = right_child_index;
                }else{
                    break;
                }

                if(heap->elements[swap_index] > heap->elements[i])
                {
                    int temp = heap->elements[i];
                    heap->elements[i] = heap->elements[swap_index];
                    heap->elements[swap_index]= temp;

                    i = swap_index;
                }else{
                    break;
                }
            }
        }


        void percolate_down(int* numbers,int count,int index)
        {
            int i= index;
            int swap_index;

            //no children - nothing to do
            //one child - swap if needed
            //2 children -swap with larger if needed

            while((i*2)+1 < count)
            {
                int left_child_index = 2*i+1;
                int right_child_index = 2*i+2;
                bool has_left = (left_child_index < count);
                bool has_right = (right_child_index < count);

                if(has_left && has_right){
                    int left_child_value = numbers[left_child_index];
                    int right_child_value = numbers[right_child_index];

                    if(left_child_value > right_child_value){
                        swap_index = left_child_index;
                    }else{
                        swap_index = right_child_index;
                    }
                }else if(has_left){
                    swap_index = left_child_index;
                }else if(has_right){
                    swap_index = right_child_index;
                }else{
                    break;
                }

                if(numbers[swap_index] > numbers[i])
                {
                    int temp = numbers[i];
                    numbers[i] = numbers[swap_index];
                    numbers[swap_index] = temp;
                    i = swap_index;
                }else{
                    break;
                }
            }
        }
        void heapify(int* numbers,int count){
            for(int i=count/2-1;i>=0;--i){
                percolate_down(numbers,count,i);
            }
        }

        void heap_sort(int *numbers,int count)
        {
            int temp;
            heapify(numbers,count);
            for(int i=count-1;i>0;--i)
            {
                temp = numbers[0];
                numbers[0] = numbers[i];
                numbers[i] = temp;
                percolate_down(numbers,i,0);
            }
        }


互斥

“挂起等待”和“唤醒等待线程”的操作如何实现？每个Mutex有一个等待队列，一个线程要在Mutex上挂起等待，首先在把自己加入等待队列中，然后置线程状态为睡眠，然后调用调度器函数切换到别的线程。一个线程要唤醒等待队列中的其它线程，只需从等待队列中取出一项，把它的状态从睡眠改为就绪，加入就绪队列，那么下次调度器函数执行时就有可能切换到被唤醒的线程。

int pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr);   //初始化互斥量
int pthread_mutex_destroy(pthread_mutex_t *mutex);      //销毁互斥量
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);

注意死锁情况：
    1. 同一个线程先后两次调用 lock
    2. 循环锁
避免死锁：
    1. 尽量避免同时获得多个锁
    2. 尽量使用 pthread_mutex_trylock 代替 pthread_mutex_lock 调用


条件变量
    int pthread_cond_destroy(pthread_cond_t *cond);
    int pthread_cond_init(pthread_cond_t *restrict cond,const pthread_condattr_t *restrict attr);
    int pthread_cond_timewait(pthread_cond_t *restrict cond,pthread_mutex_t *restrict mutex,const struct timespec *restrict abstime);
    int pthread_cond_wait(pthread_cond_t *restrict cond,pthread_mutex_t *restrict mutex);
    int pthread_cond_broadcast(pthread_cond_t *cond);
    int pthread_cond_signal(pthread_cond_t *cond);

struct data{
    int n;
    struct data* next;
};

pthread_cond_t condv = PTHREAD_COND_INITIALIZER;
pthread_mutex_t mlock = PTHREAD_MUTEX_INITIALIZER;
struct data* phead = NULL;
void producer(void* arg)
{
    printf("producer thread running.\n");
    int count =0;
    for(;;)
    {
        int n = rand()%100;
        struct data* nd = (struct data*)malloc(sizeof(struct data));
        nd->n = n;

        pthread_mutex_lock(&mlock);
        struct data* tmp = phead;
        phead = nd;
        nd->next = tmp;
        pthread_mutex_unlock(&mlock);
        pthread_cond_signal(&condv);

        count+=n;
        if(count > LIMIT)
        {
            break;
        }
        sleep(rand() %5);
    }
    printf("producer count=%d\n",count);
}

void consumer(void* arg)
{
    printf("consumer thread running.\n");
    int count = 0;
    for(;;)
    {
        pthread_mutex_lock(&mlock);
        if(NULL == phead)
        {
            pthread_cond_wait(&condv,&mlock);   //释放锁，线程阻塞，唤醒后加锁返回
        }else{
            while(phead!=NULL)
            {
                count += phead->n;
                struct data* tmp = phead;
                phead = phead->next;
                free(tmp);
            }
        }
        pthread_mutex_unlock(&mlock);
        if(count > LIMIT)
        {
            break;
        }
    }
    printf("consumer count=%d\n",count);
}

int main(){
    pthread_t tid1,tid2;
    pthread_create(&tid1,NULL,(void*)producer,NULL);
    pthread_create(&tid2,NULL,(void*)consumer,NULL);

    pthread_join(tid1,NULL);
    pthread_join(tid2,NULL);
    return 0;
}



信号量
    信号量适用于控制一个仅支持有限个用户的共享资源。用于保持在0 至指定最大值之间的一个计数值。当线程完成一次对该semaphore对象的等待时，该计数值减一；当线程完成一次对semaphore对象的释放时，计数值加一。当计数值为0时，线程挂起等待，直到计数值超过0。

    信号量的执行逻辑：
        当需要获取共享资源时，先检查信号量，如果值大于0，则值减1，访问共享资源，访问结束后，值加1，如果发现有被该信号量挂起的线程，则唤醒其中一个线程；如果检查到信号量为0，则挂起等待。
    
    信号量本质上是一个非负数的整数计数器，它也被用来控制对公共资源的访问。当公共资源增加的时候，调用信号量增加函数sem_post()对其进行增加，当公共资源减少的时候，调用函数sem_wait()来减少信号量。当信号量为0时，会阻塞 sem_wait(sem_t *sem)

    int sem_init(sem_t *sem,int pshared,unsigned int value);
    int sem_wait(sem_t *sem);
    int sem_trywait(sem_t *sem);
    int sem_post(sem_t *sem);
    int sem_destroy(sem_t *sem);

#include<semaphore.h>

#define NUM 5

int queue[NUM];
sem_t psem,csem;

void producer(void* arg)
{
    int pos = 0;
    int num,count = 0;
    for(int i=0;i<12;i++)
    {
        num = rand() %100;
        count+=num;
        sem_wait(&psem);        //信号量减一
        queue[pos] = num;
        sem_post(&csem);        //信号量加一
        printf("producer:%d\n",num);
        pos = (pos+1)%NUM;
        sleep(rand()%2);
    }
    printf("producer count=%d\n",count);
}

void consumer(void* arg){
    int pos = 0;
    int num,count =0;
    for(int i=0;i<12;i++)
    {
        sem_wait(&csem);
        num = queue[pos];
        sem_post(&psem);
        printf("consumer:%d\n",num);
        count+=num;
        pos = (pos+1)%NUM;
        sleep(rand()%3);
    }
    printf("consumer count=%d\n",count);
}

int main(){
    sem_init(&psem,0,NUM);
    sem_init(&csem,0,0);

    pthread_t tid[2];
    pthread_create(&tid[0],NULL,(void*)producer,NULL);
    pthread_create(&tid[1],NULL,(void*)consumer,NULL);
    pthread_join(tid[0],NULL);
    pthread_join(tid[1],NULL);
    sem_destroy(&psem);
    sem_destroy(&csem);

    return 0;
}

        /**
        * 队列，数组方式实现
        */  
        typedef struct JWQueueArrayImplementation{
            int data[kQueuePositions];  // 1 is unusable position
            int insert;     //入队的位置
            int pop;        //出队的位置
            int capacity;   //容量
        } queue;

        /**
        * 队列，链表方式实现
        */
        typedef struct Node{
            int value;
            struct Node *next;
        } node;
        typedef struct Queue{
            node *head;     //入队的位置
            node *tail;     //出队的位置
        } queue;