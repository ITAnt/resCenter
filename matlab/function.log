real()  % 实部

imag()  % 虚部

angle()     % 相位

heaviside() %阶跃函数

fliplr()    % 翻转
rectpuls()  % 矩阵波
tripuls()   % 三角波

% 信号的奇偶分解
f = sym('cos(t+1)+t');
f1 = subs(f,t,-t);
g = 1/2 *(f+f1);    % 偶分量
h = 1/2 *(f-f1);    % 奇分量

信号的积分和微分
    连续信号
        diff(function,'variable',n)     % 微分
            function：信号
            variable：独立变量
            n：求导的阶数

        int(function,'variable',a,b)      % 积分
            a: 积分上限
            b：积分下限

卷积
    conv()
    conv2()
    convn()

freqs
    模拟滤波器的频率响应，freqs 返回一个模拟滤波器的H(jw)的复频域响应（拉普拉斯格式）。
    h = freqs(b, a, w) 根据系数向量计算返回模拟滤波器的复频域响应。freqs 计算在复平面虚轴上的频率响应h，角频率w确定了输入的实向量，因此必须包含至少一个频率点。
    [h, w] = freqs(b, a) 自动挑选200个频率点来计算频率响应h
    [h, w] = freqs(b, a, f) 挑选f个频率点来计算频率响应h



simplify和simple是Matlab符号bai数学工具箱提供的两个简化函数，区别du如下：
    simplify的调用格式zhi为：simplify(S)；对表达式S进行化dao简。
    simple是通过对表达式尝试多种不同的方法（包括simplify）进行化简，以寻求符号表达式S的最简形式。

    simple 调用方式：
        [r,how] = simple(S);r为返回的简化形式，how为化简过程中使用的一种方法。how有以下几种形式：
            1. simplify 函数对表达式进行化简；
            2. radsimp函数对含根式的表达式进行化简；
            3. combine 函数将表达式中以求和、乘积、幂运算等形式出现的项进行合并；
            4. collet合并同类项
            5. factor函数实现因式分解
            6. convert函数完成表达式形式的转换

fftshift
    将零频率的分量移到频谱的中心
    对于向量，fftshift(X)将X均分为左右两部分并兑换。对于矩阵，fftshift(X)将第一个四分块同第三个四分块调换，第二个同第四个调换。
    对于更高维的数组，fftshift(X)沿着X的每一个维度，将X的两个“半空间”对调。
    Y=fftshift(X,dim)是对X的dim维度进行fftshift操作。
    注意：ifftshift是fftshift的逆过程。如果矩阵X包含奇数个元素，为了得到原始的X，我们必须用ifftshift(fftshift(X))这个操作。单纯的通过两次使用fftshift(X)将不会得到X。

cylinder函数：绘制三维圆柱图
    用法说明：
        1. [x,y,z]=cylinder 函数返回一半径和高度都为1的圆柱体x，y，z轴的坐标值，圆柱体沿其周长有20个等距分布的点
        2. [x,y,z]=cylinder(r) 函数一个半径为r、高度为1的圆柱体的x，y，z轴的坐标值，圆柱体沿其周长有20个等距分布的点
        3. [x,y,z]=cylinder(r,n) 函数一个半径为r、高度为1的圆柱体的x，y，z轴的坐标值，圆柱体沿其周长有n个等距分布的点
        4. cylinder(...) 函数只绘制圆柱，没有任何的输出参量。其他参量及结果同上

conj函数：用于计算复数的共轭值
    用法说明：y=conj(x)函数计算复数x的共轭值。输出结果y的维数跟输入x的维数一致，返回值为：real(y)-i*imag(y)

信号波的产生

    线性调频扫频信号函数
        chirp(t,f0,t1,f1,'method',phi,'shape')
            产生一个线性（频率随时间线性变化）信号，其时间轴设置由数组 t 定义。时刻 0 的瞬间频率为f0,时刻t1的瞬间频率为f1。默认情况，f0=0Hz,t1 =1,f1 = 100Hz
            method：
                指定改变扫频的方法。默认时为 linear
                linear 线性扫频
                quadratic：二次扫频
                logarithmic：对数扫频 ，必须有 f1>f0
            phi:
                指定信号的初始相位为 phi(单位为度)，默认时 phi =0。
            shape:
                指定二次扫频方法的抛物线的形状是凹还是凸，值为 concave 或 convex。
    
    方波信号产生
        square 函数可以得到方波函数。
            square(t,duty)：产生一个 2*pi 为周期的方波，范围为 -1 到 1 之间，占空比为50%。很像sin函数，比如sin函数输入pi/6 就是1/2，输入pi/2 就是1，输入pi就是0，输入3/2*pi就是-1；而square也是一样，输入的数小于pi，就是1，大于pi小于2*pi就是-1。
                duty：duty是一个百分数,duty = 75(75%的占空比），用于指定脉冲宽度与整个周期的比例。

随机函数与三角波函数
    rand(m,n)：返回一个 m X n 的随机矩阵。

    sawtooth()：用于产生锯齿波或三角波信号
        sawtooth(t)：产生周期为 2pi，振幅为 -1 到 1 的锯齿波。在 2pi 的整数倍处值为 -1 到1，这一段波形斜率为 1/pi。
        sawtooth(t,width)：产生三角波，width 在 0到1之间。


rectpuls 函数与 diric 函数

    rectpuls()：产生非周期方波信号函数
        rectpuls(t,w)：产生指定宽度为 w 的非周期方波
    
    diric()：用于产生 Dirichlet 函数或周期 Sinc 函数
        diric(x,n)：返回一大小与 x 相同的矩阵，其元素为 Dirichlet 函数
    
sinc 函数与 tripuls 函数
    sinc(x)：返回一个有 sinc 函数值为元素的矩阵。
    
    tripuls()：用于产生非周期三角波信号
        tripuls(t,w,s)：产生周期为 w 的非周期方波，斜率为 s（-1<s<1）

gauspuls 函数与 pulstran 函数
    guaspuls()：用于产生高斯正弦脉冲信号函数
        guaspuls(T,FC,BW,BWR):产生幅度为1 的高斯正弦脉冲（RF）信号的抽样
            T ：持续时间
            FC: 中心频率
            BW: 宽带
        
        TC = guaspuls('cutoff',FC,BE,BER,TPB):返回按参数 TEP(dB) 计算所对应的截断时间TC
    
    pulstran() 用于脉冲序列发生器
        pulstran(t,d,'func'):该函数基于一个名为 func 的连续函数并以之为一个周期，从而产生一串周期性的连续函数(func 函数可自定义)。pulstran 函数的横坐标范围有向量 t 指定，而向量 d 用于指定周期性的偏移量（即各个周期的中心点），这样这个 func 函数会被计算 length(d) 次，从而产生一个周期性脉冲信号。
        pulstran 函数的一个调用形式为 y = pulstran(t,d,'func',p1,p2,...)：p1,p2,... 为需要传送给 func 函数的额外输入参数值（除了变量t 之外）。

    

连续时间系统的时域分析

    连续时间系统的零状态与零输入响应的求解分析

        连续时间系统可以用常系数微分方程来描述，其完全响应由零输入响应和零状态响应组成。MATLAB 符号工具箱提供了 dsolve 函数，可以实现对常系数微分方程的符号求解，其调用格式为:
            dsolve('eq1,eq2,...','cond1,cond2,...','v')
                eq：表示各个微分方程
                cond：表示初始条件或者起始条件
                v: 表示自变量，默认是变量 t
            通过使用 dsolve 函数可以求出系统微分方程的零输入响应和零状态响应，进而求出完全响应。
    
    
    连续时间系统数值求解
        用于求解零初始条件微分方程数值解的函数 lsim，输入信号为 f
            lsim(sys,f,t);
                t：表示计算系统响应的抽样点向量
                f：系统输入信号向量
                sys：是 LTI 系统模型，用来表示微分方程、差分方程或状态方程。
                    sys = tf(b,a);
                        b 和 a 分别是微分方程的右端和左端系数向量。
        
    连续时间系统冲激响应和阶跃响应分析
        求解冲激响应可用 impulse 
            调用形式：
                impulse(sys,t);
        求解阶跃响应可用 step
            调用形式
                step(sys,t);
    
    连续时间系统卷积求解
        f = conv(f1,f2)*dt;
            
描述一个线性时不变离散时间系统，有如下两种常用方法：
    1. 用单位冲激响应来表征系统
    2. 用差分方程来描述系统输入与输出之间的关系。


离散时间系统响应
    函数 filter 可以用来对差分方程在指定时间范围内的输入序列所产生的响应进行求解，该函数的调用方法如下
        y = filter(b,a,x);
        [Y,Zf] = filter(b,a,x,zi)
        filter(b,a,x,[],dim)
            b：差分方程右端
            a：差分方程左端
            x：输入的离散序列
            zi: 指定X的初始状态，Zf为最终状态矢量
            dim: 指定的 x 的维数 DIM 进行操作
            y：输出的离散序列
    
    函数 impz() 函数用于求解离散时间系统单位冲激响应。
        调用形式：h = impz(b,a,k);
            a、b: 差分方程左、右端的系数向量
            k：表示输出序列的取值范围(可省略)
            h: 系统单位冲激响应（如果没有输出参数，直接调用 impz(b,a,k)，则 MATLAB将会在当前绘图窗口中自动画出系统单位冲激响应的图形）
    
    离散时间信号的卷积和运算
        conv() 函数用于计算两个离散序列卷积和的函数，其调用形式为
            c = conv(a,b)
            a、b 分别为待卷积的两序列的向量表示，c 是卷积结果。


变换
    Z变换的函数 ztrans() 和 Z 反变换的函数 iztrans()，其调用形式为
        F = ztrans(f);
        f = iztrans(F);
            右端的 f和 F分别为时域表示式和 Z域表示的符号表示，可应用函数 sym 来实现，其调用形式为：
                S = sym(A)
        
    留数法求 Z 反变换可以使用函数 residuez() 实现，调用格式为
        [R P K] = residuez(B,A);

        B和A 分别为X(z) 的多项式中分子多项式和分母多项式的系数向量
        返回值：
            R ：留数向量
            P ：极点向量
            K ：直接项系数，仅在分子多项式最高次幂大于等于分母多项式最高次幂时存在，否则，返回值为空。

离散系统函数频域分析
    利用MATLAB 来求解频率响应的过程如下：
        1. 根据系统函数 H(z)定义分子、分母多项式系数向量B 和 A
        2. 调用前述的 ljdt() 函数求出 H(z) 的零极点，并绘出零极点图
        3. 定义 z 平面单位圆上的 k 个频率分点
        4. 求出 H(z) 所有的零点和极点到这些等分点的距离
        5. 求出 H(z) 所有的零点和极点到这些等分点矢量的相角
        6. 求出系统的｜H(e^jw)｜ 和 相位
        7. 绘制指定范围内系统的幅频曲线和相频曲线

        在 MATLAB 中，函数 freqz 用于求离散时间系统频响特性，该函数的调用方法如下：
            [H,W] = freqz(B,A,N);
            [H,W] = freqz(B,A,N,'whole')

            B 与 A 分别表示 H(z)的分子与分母多项式的系数向量
            N 为正整数，默认值为 512
            W 包含 [0,pi] 范围内的N个频率等分点
            H 离散时间系统频率响应 H(e^jw) 在 0～pi 范围内N的频率处对应的值
        
    
离散系统函数零点分析
    在MATLAB 中，系统函数的零极点就可以通过函数 roots 得到，也可以借助函数 tf2zp 得到
        roots(A)：求系统的极点
        roots(B)：求系统的零点

        [Z,P,K] = tf2zp(B,A)： 将 H(z) 的有理式表示为转换为零极点增益形式。 
            B 与 A 分别表示为 H(z) 的分子与分母多项式的系数向量

        zplane() 函数用于绘制 H(z) 的零极点图，调用格式为
            zplane(z,p)
            绘制出列向量 z 中的零点（以符号"o"表示）和列向量 p 中的极点(以符号"X"表示)，以及参考单位圆，在多阶零点和极点的右上角标出其阶数。如果z 和p 为矩阵，则会以不同颜色绘出 z 和 p 各列中的零点和极点。

离散系统差分函数求解
    差分方程的解也分为通解与特解，通解是与方程初始状态有关的解，特解与外部输入有关，它描述系统在外部输入作用下的强迫运动。

    filtic(): 为滤波器的直接实现选择初始条件

    https://blog.csdn.net/wangming520liwei/article/details/29816075

离散的傅立叶变换
    在实际数据处理中，k 一般取 N/2，此时波的周期最小，获得的频率范围最大，所以想要获得高频率的信号，就需要缩短取样间隔。

    dftmtx(n) 返回 nxn 的复杂离散傅立叶变换矩阵。
        x = rand(1,Nfft);
        y = dftmtx(Nfft)*x  和 y = fft(x) 是等价的
    
    示例
        xn = sin(100*2*pi*t);
        N = length(xn);
        WNnk = dftmtx(N);
        Xk = xn * WNnk;
        y = fft(xn);

    频率域采样
        频率响应的混叠失真
            N  = fs/f0 >(2fh)/f0,这是实现DFT 算法必须满足的最低条件。如果不满足该条件，则会产生频域响应的周期延拓分量重叠现象，即频率响应的混叠失真。
        
        频谱泄露
            实际情况下，我们取的信号都是有限长的，即对原始序列做加窗处理使其成为有限长，时域的乘积对应频域的卷积，造成频谱的泄漏。
            减小泄漏的方法：可以取更长的数据（与原始数据就越相近），缺点运算量加大；可以选择窗的形状，从而使窗谱的旁瓣能量更小。
        
        栅栏效应
            DFT 上看到的谱线都是离散的，而从序列的傅立叶变换知道谱线是连续的，所以相当于看到谱的一些离散点，而不是全部，感觉像是透过栅栏看到的情景，称为栅栏效应。
        
        频率分辨率
            增加分辨率只有通过加大取样点 N，但不是补零的方式来增加 N,因为补零不是原始信号的有效信号。

快速傅立叶变换
    快速傅立叶变换是傅立叶变换的一种快速算法，简称为 fft,采用这种算法能大大减少计算离散傅立叶变换所需要的乘法次数，特别是被变换的抽样点数 N 越多，FFT 算法计算量的节省就越显著。
    根据对称性和周期性，可分为两类
        时间抽取法
        频率抽取法
    
    基于2时分的FFT算法

    基于2频分的FFT算法

    快速傅立叶变换的MATLAB实现

        fft(x,n)
            x ：取样的样本，可以是一个向量，也可以是一个矩阵
            y : x 的快速傅立叶变换
            n : 通过改变 n 值来直接对样本进行补零或者截断的操作（n省略，实际操作中，会对 x 进行补零操作，使 x 的长度等于 2 的整数次幂，这样能提高程序的计算速度）
        y = ifft(X)：用来计算序列的逆傅立叶变换。
            x : 需要进行逆变换的信号
            y : 为快速傅立叶反变换的输出 


离散余弦变换
    在傅立叶级数展开式中，如果被展开的函数是实偶函数，那么其傅立叶级数中只包含余弦项，再将其离散化可导出余弦变换，因此称之为离散余弦变换。
    在 MATLAB 中，dct 函数用于进行 DCT 变换，该函数的调用方法如下：
        y = dct(x): 返回序列 x 的DCT 结果
    dict2 函数用于 DCT  反变换，该函数调用方法为
        B = dict2(A)：计算 A 的 DCT 反变换B，A与 B的大小相同
    

Chirp Z变换
    系统的单位冲激响应 h(n) = W^(-n^2/2)与频率随时间成线性增加的线性调频信号相似，因此称为 Chirp-Z 变换。
    在 MATLAB 中，czt 函数用于实现 Chirp-Z 变换，该函数的调用方式如下：
        y = czt(x,m,w,a);
        此函数计算由  z = a*w.^(-(0:m-1)) 定义的 z 平面螺旋线上各点的 Z 变换,a 规定了起点，w规定了相邻点的比例，m 规定了变换的长度，后 3 个变量默认值为 a=1,w = exp(j*2*pi/m) 及 m = length(x),因此 y =czt(x) 就等于 y =fft(x)
    
Gabor 函数
    Gabor 变换属于加窗傅立叶变换，Gabor 函数可以在频域不同尺度、不同方向上提取相关的特征。另外 Gabor 函数与人眼的生物作用相仿，所以经常用作纹理识别上，并取得了较好的效果。

    Gabor展开
        用过采样的 Gabor 展开来检测瞬时信号，效果要比传统的方法好。Gabor展开固有的局部化特性，使它特别适合于描述瞬时信号，可选择单边指数窗作为Gabor 展开的窗函数，与瞬时信号的非对称性及突变性相适应。
        利用 Gabor 展开，得到观测信号展开后的系统，就可以用其系数啦检测瞬时信号的存在。



经典傅立叶变换只能反映信号的整体特性（时域、频域）。对信号的齐性不敏感，不能给出在各个局部时间范围内部频谱上的谱信息描述。

zp2tf
    将系统函数的零极点转化为bai系统函数一般形式的du系数，比如得到了系统函数zhiH(s)的零极点的dao值，z为零点的值，p为极点的值，k为系数。


滤波器
    数字滤波器的功能就是把输入序列 x(n) 通过一定的运算变换成输出序列 y(n) ,不同的运算处理方法决定了滤波器实现结构的不同
    数字滤波器根据其冲激响应函数的时域特性，可分为两种，即无限长冲激响应（IIR）滤波器和有限长冲激响应（FIR）滤波器。IIR 滤波器的特征是具有无限连续时间冲激响应，这种滤波器一般需要用递归来实现，因而有时也称之为递归滤波器。
    FIR 滤波器的冲激响应只能延续一定时间，在工程实际中可以采用递归的方式实现，也可以采用非递归的方式实现。
    数字滤波器的设计方法有很多种，如双线性变换法、窗函数设计法、插值逼近法和切比雪夫逼近法等。
    FIR：有限脉冲响应滤波器
    IIR：无线脉冲响应滤波器
    
    滤波器也可以看成一个系统，如果用一个理想脉冲信号激励，就会有输出，我们把输出个数有限的称为有限脉冲响应滤波器（FIR）；输出无限多的称为无限脉冲响应滤波器（IIR）。

    IIR
        无限冲激响应滤波器的单位抽样响应 h(n) 是无限长的，对于一个给定的线性时不变系统的系统函数，有着各种不同的等效差分方程或网络结构。
        由于乘法是一种耗时运算，而每个延迟单元都要有一个存储寄存器。因此，采用最少常数乘法器和最少延迟支路的网络结构是通常的选择，以便提高运算速度和减少存储器。然而，当需要考虑有限寄存器长度的影响时，往往也并非采用最少乘法和延迟单元的结构。
        IIR滤波器实现的基本结构有直接型、级联型和并联型

        直接型（累加）
            直接 I 型的系统输入输出关系的 N 阶差分方程
                y(n) = sum(ak.*y(n-k)) ~(1->N) +sum(bk.*x(n-k)) ~(0->M)

                sum(bk.*x(n-k)) ~(0->M) 表示将输入及延时后的输入组成 M 节的延时网络，即横向延时网络，实现零点
                sum(ak.*y(n-k)) ~(1->N) 表示输出及其延时组成 N 节延时网络，实现极点
                直接 I 型需要 N+M 级延时单元
            
            如果相同输出的延迟单元合并成一个，N阶滤波器只需要 N级延迟单元，这是实现 N 阶滤波器所必须的最少数量的延迟单元。这种结构称为直接型II,有时将直接型I 简称为直接型，将直接型II称为典型形式。
            结构的特点如下：
                1. 只需 N 个延时单元
                2. 系数对滤波器的性能控制作用不明显
                3. 极点对系数变换过于灵敏
            通常在实际中很少采用上述两种结构实现高阶系统，而是把高阶变成一系列不同组合的低阶系统（一、二阶）来实现
            在 MATLAB 中，提供 filter 函数实现 IIR 的直接形式，其调用格式如下：
                y = filter(b,a,x);
                b : 表示系统传递函数的分子多项式的系数矩阵
                a : 表示系统传递函数的分母多项式的系数矩阵
                x : 表示输入序列
                y : 表示输出序列
        
        级联型（变换为数乘方式）
            实现方法
                1. 当 M=N 时，共有 (N+1)/2 （下取整） 节
                2. 如果有奇数个实零点，则有一个 B(下标为2k) 等于零。如果有奇数个实极点，则有一个 a(下标为2k)等于零
                3. 一阶、二阶基本节，整个滤波器级联
        
            特点：
                1. 系统实现简单，只需一个二阶节系统通过改变输入系数即可完成
                2. 极点位置可单独调整
                3. 运算速度快（可并行进行）
                4. 各二阶网络的误差互不影响，总的误差小，对字长要求低
            缺点：
                不能直接调整零点，因为多个二阶节的零点并不是整个系统函数的零点，当需要准确的传输零点时，级联型最合适

        并联型（因式分解）

            优点：
                1. 简化实现，用一个二阶节，通过变换系数就可实现整个系统
                2. 极、零点可单独控制、调整，调整 a(下标为2k),r(下标为2k) 只单独调整了第 i 对零点，调整 B(下标1i),B(下标2i)，则单独调整了第i对极点
                3. 各二阶节零、极店的搭配可互换位置，优化组合以减少运算误差
                4. 可流水线操作
            缺点：
                二阶节电平难控制，电平大易导致溢出，电平小则使信噪比减小
        
        模拟滤波器的基础知识和原型设计
            模拟滤波器的设计以几种典型的低通滤波器的原型函数为基础。如巴特沃斯滤波器、切比雪夫滤波器和椭圆滤波器等。滤波器有严格的设计公式以及曲线和图表可供设计人员使用。各种模拟滤波器的设计过程都是先设计出低通滤波器，然后再通过频率变换将低筒滤波器转换为其他类型的模拟滤波器。

            巴特沃斯滤波器
                在 MATLAB 中，buttap 函数用于计算 N阶巴特沃斯归一化（3dB 截止频率），模拟低通原型滤波器系数函数的零、极点和增益因子，其调用格式为
                    [z,p,k] = buttap(N);
                    N 是欲设计的低通原型滤波器的阶次，z、p 和 k 分别是设计出的 G(p) 的极点、零点和增益。

                在已知设计参数 wp,ws,Rp,Rs 之后，利用 buttord 命令可求出所需要的滤波器的阶数和截止频率，其格式为
                    [n,Wn] = buttord[Wp,Ws,Rp,Rs]
                    其中，Wp、Ws、Rp、Rs 分别为通带截止频率、阻带起始频率、通带内波动、阻带内最小衰减。返回值n 为滤波器的最低阶数，Wn为3dB 截止频率
                    由巴特沃斯滤波器的阶数n 以及 3dB截止频率 Wn可以计算出对应传递函数 H(z)的分子分母系数，MATLAB 提供的命令如下：
                        1. 巴特沃斯低通滤波器系数计算
                            [b,a] = butter(n,Wn);
                            b 为 H(z) 的分子多项式系数
                            a 为 H(z) 的分母多项式系数
                        2. 巴特沃斯高通滤波器系数计算
                            [b,a] = butter(n,Wn,'High')
                        3. 巴特沃斯带通滤波器系数计算
                            [b,a] = butter(n,[W1,W2])
                            [W1,W2] 为截止频率，是二元向量，需要注意的是该函数返回的是 2*n 阶滤波器系数
                        4. 巴特沃斯带阻滤波器系数计算
                            [b,a] = butter(ceil(n/2),[W1,W2],'stop')
                            [W1,W2]为截止频率，是二元向量，需要注意的是，该函数返回的也是 2*n 阶滤波器系数
            
            切比雪夫 I 型滤波器
                在 MATLAB 中，cheblap 函数用于设计切比雪夫 I 型低通滤波器。该函数的调用方法为
                    [z,p,k] = cheblap(n,rp);
                    n 为滤波器的阶数
                    rp 为通带的幅度误差
                    返回值分别为滤波器的零点、极点和增益
            
            切比雪夫II型滤波器
                在MATLAB 中，cheb2ap 函数用于设计切比雪夫II型低通滤波器，Cheb2ap 的语法为
                    [z,p,k] = cheb2ap(n,rp)
                    n 为滤波器的阶数
                    rp 为通带的波动
                    返回值 z，p，k 分别为滤波器的零点、极点和增益

            椭圆滤波器设计
                椭圆滤波器又称考尔滤波器，是在通带和阻带等波纹的一种滤波器。椭圆滤波器相比其他类型的滤波器，在阶数相同的条件下有着最小的通带和阻带波动，它在通带和阻带的波动相同，这一点区别于在通带和阻带都平坦的巴特沃斯滤波器，以及通带平坦、阻带等波纹或是阻带平坦、通带等波纹的切比雪夫滤波器。
                特点如下：
                    1. 椭圆低通滤波器是一种零、极点型滤波器，它在有限频率范围内存在传输零点和极点
                    2. 椭圆低通滤波器的通带和阻带都具有等波纹特性，因此通带、阻带逼近特性良好
                    3. 对于同样的性能要求，它比前两种滤波器所需用的阶数都低，而且它的过渡带比较窄

                在MATLAB 中，ellipord 函数和 ellipap 函数用于设计椭圆滤波器，这些函数的调用方法如下：
                    [n,Wp] = ellipord(Wp,Ws,Rp,Rs)
                        功能是求滤波器的最小阶数
                        n 表示椭圆滤波器最小阶数
                        Wp 表示椭圆滤波器通带截止频率
                        Ws 表示椭圆滤波器阻带起始角频率
                        Rp 表示通带波纹(dB)
                        Rs 表示阻带最小衰减(dB)
                    
                    [z,p,k] = ellipap(n,Rp,Rs)
                        其中 z,p,k 分别为滤波器的零点、极点和增益
                        n 为滤波器阶数
        
        频带变换

            低通到低通的频带变换
                在MATLAB 中，函数 lp2lp 用于把模拟低通滤波器转换为实际模拟低通滤波器，该函数的调用方式如下：
                    [a,b] = lp2lp(ap,bp,wp)
                    wp 为模拟低通滤波器的通带截止频率
                    ap，bp 分别是归一化模拟低通滤波器系统函数的分子、分母的系数
                    a,b 分别是频带变换后的模拟低通滤波器系统函数的分子、分母的系数
            
            低通到高通的频带变换
                在MATLAB中，函数 lp2hp 用于把模拟低通滤波器转换为一般的模拟高通滤波器。该函数调用方法如下：
                    [a,b] = lp2hp(ap,bp,wp);
                    wp 为模拟高通滤波器的通带起始频率
                    ap，bp 是归一化模拟低通滤波器系统函数的分子、分母的系数
                    a，b 分别是频带变换后的模拟高通滤波器系统函数的分子、分母的系数
                
            低通到带通的频带变换
                在MATLAB 中，函数 lp2bp 用于模拟低通滤波器转换为一般的模拟带通滤波器。该函数的调用方法如下：
                    [a,b] = lp2bp(ap,bp,wo,bw);
                    ap,bp 分别是归一化模拟低通滤波器系统函数的分子、分母的系数
                    a,b 分别是频带变换后的模拟带通滤波器系统函数的分子、分母的系数
                    wo 是模拟滤波器的中心频率
                    bw 是模拟滤波器的带宽
            
            低通到带阻的频带变换
                在MATLAB 中，函数 lp2bs 用于将模拟低通滤波器转换为一般的模拟带阻滤波器。该函数的调用方式如下：
                    [a,b] = lp2bs(ap,bp,wo,bw);
                    ap,bp 分别是归一化模拟低通滤波器系统函数的分子、分母的系数
                    a,b 分别是频带变换后的模拟带阻滤波器系统函数的分子、分母的系数
                    wo 是模拟滤波器的中心频率
                    bw 是模拟滤波器的带宽
        

        冲激响应不变法与双线性变换法
            MATLAB 提供了函数 impinvar、bilinear 用于实现冲激响应不变法、双线性变换法设计数字滤波器，调用格式为
                [Bz,Az] = impinvar(B,A,Fs);
                [Bz,Az] = bilinear(B,A,Fs);
                B 和 A 分别为模拟滤波器系统函数的分子向量和分母向量
                Bz 和 Az 分别为数字滤波器系统函数的分子向量和分母向量
                Fs 为采样频率，其单位为Hz

        滤波器最小阶数选择
            根据滤波器的设计指标计算滤波器的阶数，MATLAB 有如下4个函数，除了能选择模拟滤波器的阶数外，同时也能选择数字滤波器的阶数。
            1. 选择巴特沃斯滤波器阶数
                数字域：[n,Wn] = buttord(Wp,Ws,Rp,Rs)
                模拟域：[n,Wn] = buttord(Wp,Ws,Rp,Rs,'s')
            2. 选择巴特沃斯I型滤波器阶数
                数字域：[n,Wn] = cheb1ord(Wp,Ws,Rp,Rs)
                模拟域：[n,Wn] = cheb1ord(Wp,Ws,Rp,Rs,'s')
            3. 选择巴特沃斯II型滤波器阶数
                数字域：[n,Wn] = cheb2ord(Wp,Ws,Rp,Rs)
                模拟域：[n,Wn] = cheb2ord(Wp,Ws,Rp,Rs,'s')
            4. 选择椭圆滤波器阶数
                数字域：[n,Wn] = ellipord(Wp,Ws,Rp,Rs)
                模拟域：[n,Wn] = ellipord(Wp,Ws,Rp,Rs,'s')
            其中
                n : 返回符合要求性能指标的数字滤波器或模拟滤波器的最小阶数
                Wn: 滤波器的截止频率(即 3dB)
                Wp: 通带的截止频率
                Ws: 阻带的截止频率，单位 rad/s。且均为归一化频率，即1对应 pi 弧度
            频率归一化：信号处理工具箱中使用的频率为奈奎斯频率，根据香农定理，它为采样频率的一般，在滤波器设计中的截止频率均使用奈奎斯频率进行归一化。归一化频率转换为角频率，则将归一化频率乘以 pi。如果将归一化频率转换为 Hz，则将归一化频率乘以采样频率的一半。

        滤波器设计

            设计好滤波器之后，要对其各方面的进行测试，在正式设计之前，先介绍 freqs 函数，用于测试模拟滤波器的频率响应。该函数的调用方法如下：
                h = freqs(b,a,w):根据系数向量计算返回模拟滤波器的复频域响应。freqs 计算在复平面虚轴上的频率响应h ，角频率 w 确定了输入的实向量，因此必须包含至少一个频率点
                [h,w]  = freqs(b,a) : 自动挑选 200 个频率点来计算频率响应 h
                [h,w] = freqs(b,a,f):挑选 f 个频率点来计算频率响应 h
        
            滤波器设计步骤
                1. 确定指标
                    幅度指标主要以两种方式给出
                        第一种是绝对指标，它提供对幅度响应函数的要求，一般应用于 FIR 滤波器的设计
                        第二种是相对指标，它以分贝值的形式给出要求

                    对于相位响应指标形式，通常希望系统在通频带中具有线性相位。运用线性相位响应指标进行滤波器设计具有如下优点：
                        1. 只包含实数算法，不涉及复数运算
                        2. 不存在延迟失真，只是固定数量的延迟
                        3. 长度为 N 的滤波器(阶数为N-1)，计算量为 N/2 数量级
                2. 逼近
                    通常采用理想的数字滤波器模型。之后，利用数字滤波器的设计方法，设计出一个实际滤波器模型来逼近给定的目标
                3. 性能分析和计算机仿真
                    上两步的结果是得到以差分系统函数或冲激响应描述的滤波器。根据这个描述就可以分析其频率特性和相位特性，以验证设计结果是否满足指标要求，或者利用计算机仿真实现设计的滤波器，再分析滤波器结构来判断。
            
            经典滤波器设计
                1. 巴特沃斯模型和数字滤波器设计
                    数字域： 
                        [b,a] = butter(n,Wn):可设计出截止频率为 Wn 的n 阶 butterworth 滤波器
                        [b,a] = butter(n,Wn,'ftype')：当 ftype == hight 时，可设计出截止频率为Wn的高通滤波器，当 ftype ==stop 时，可设计出带阻滤波器
                        [z,p,k] = butter(n,Wn)
                        [zp,k] = butter(n,Wn,'ftype');
                        [A,B,C,D] = butter(n,Wn);
                        [A,B,C,D] = butter(n,Wn,'ftype');
                    模拟域：    
                        [b,a] = butter(n,Wn,'s'):可设计出截止频率为 Wn 的n 阶模拟 butterworth 滤波器，其余形式类似于数字域的
                
                2. 切比雪夫I型滤波器（通带等波纹）设计
                    数字域：
                        [b,a] = cheby1(n,Rp,Wn)：可设计出n 阶切比雪夫I型滤波器，其截止频率由Wn确定，通带内的波纹由Rp确定
                        [b,a] = cheby1(n,Rp,Wn'ftype'):当ftype ==high 时，可设计出截止频率为Wn的高通滤波器；当ftype ==stop 时，可设计出带阻滤波器
                        [z,p,k] = cheby1(n,Rp,Wn)
                        [A,B,C,D] = cheby1(n,Rp,Wn)
                        [A,B,C,D] = cheby1(n,Rp,Wn,'ftype');
                    模拟域：
                        [b,a] = cheby1(n,Rp,Wn,'s')：可设计出截止频率为 Wn的n 阶切比雪夫I型模拟滤波器，其余形式类似于数字域
                3. 切比雪夫II型滤波器（阻带等波纹）设计
                    数字域：
                        [b,a] = cheby2(n,Rs,Wn):可设计出n 阶切比雪夫I型滤波器，其截止频率由Wn 确定，阻带内的波纹由Rs确定
                        [b,a] = cheby2(n,Rs,Wn,'ftype')：当 ftype ==high 时，可设计出截止频率为 Wn 的高通滤波器；当 ftype == stop 时，可设计出带阻滤波器
                        [z,p,k] = cheby2(n,Rs,Wn)
                        [zp,k] = cheby2(n,Rs,Wn,'ftype')
                        [A,B,C,D] = cheby2(n,Rs,Wn)
                        [A,B,C,D] = cheby2(n,Rs,Wn,'ftype')
                    模拟域：    
                        [b,a] = cheby2(n,Rs,Wn,'s'):可设计出截止频率为Wn 的n阶切比雪夫II型模拟滤波器，其余形式类似于数字域

        数字滤波技术是数字信号处理中的一个重要环节，滤波器的设计则是信号处理的核心问题之一。而数字滤波器是通过数字运算实现滤波，具有处理精度高、稳定、灵活的优点，不存在阻抗匹配的问题，可以实现模拟滤波器无法实现的特殊滤波功能。
        在各种数字IIR滤波器结构中，级联型滤波器结构一方面由于各级之间相互不影响，便于准确实现滤波器零、极点和调整滤波器频率响应性能；另一方面由于各级极点密集度小，滤波器性能受滤波器系数量化的影响小，因此倍受关注。
    

    FIR 滤波器
        FIR滤波器指有限冲激响应数字滤波器，FIR数字滤波器具有有限长的脉冲采样响应特性，比较稳定。因此，FIR滤波器的应用要远远广于IIR滤波器，在信息传输领域、模式识别领域以及数字图像处理领域具有举足轻重的作用。

        特点：
            1. 系统的单位冲激响应h(n) 在有限个 h(n) 值处不为零
            2. 系统函数H(z)在 |z|>0 处收敛，并只有零点，即有限 z 平面只有零点，而全部极点都在 z=0 处（因果系统）
            3. 结构上主要采用非递归结构，没有输出到输入的反馈
        
        基本结构：
            1. 直接型
            2. 级联型
            3. 频率采样型
            4. 快速卷积型
        

        直接型结构
            该结构利用输入信号 x(n) 和滤波器单位冲激响应 h(n) 的线性卷积来描述输出信号 y(n)，所以FIR 滤波器的直接型结构又称为卷积型结构，有时也称为横截型结构
        
        级联型结构
            当需要控制系统传输零点时，将传递函数H(z)分解成二阶实系数因子的形式，这种结构的每一节控制一对零点，因为在需要控制传输零点时可以采用。
        
        频率采样型结构
            有限长序列h(n) 的z变换 H(z)在单位圆上做 N 点的等间隔采样，N个频率采样值的离散傅里叶反变换所对应的时域信号时原序列hN(n) 以采样点N为周期进行周期延拓的结果，当N大于等于原序列 h(n) 长度 M时，hN(n)=h(n),不会发生信号失真，此时 H(z) 可以用频域采样序列H(k)内插得到。
            FIR滤波器的频率采样型结构的主要优点：
                1. 它的系数H(k) 直接就是滤波器在 w = 2pik/N 处的响应值，因此可以直接控制滤波器的响应
                2. 只要滤波器的N阶数相同，对于任何频响形状，其梳妆滤波器部分的结构完全相同，N个一阶网络部分的结构也完全相同，只是各支路H(k) 的增益不同，因此滤波采样型结构便于标准化、模块化
            一般来说，当采样点数较大时，频率采样结构比较复杂，所需的乘法器和延时器比较多，但在以下两种情况下，使用频率采样结构比较经济：
                1. 对于窄带滤波器，其多数采样值为零,谐振器柜中只剩下几个所需要的的谐振器。这时采样频率采样结构比直接型结构所用的乘法器少，当然存储器还是要比直接型用得多一些
                2. 在需要同时使用很多并列的滤波器的情况下，这些并列的滤波器可以采用频率采样结构，并且可以共用梳妆滤波器和谐振柜，只要将各谐振器的输出适当加权组合就能组合成各个并列的滤波器

        快速卷积型结构
            根据圆周卷积和线性卷积的关系可知，两个长度为N 的序列的线性卷积，可以用这两个序列的 2N-1 点的圆周卷积来实现。由于FIR滤波器的直接型结构特点为滤波器的输出信号 y(n) 是输入信号 x(n) 和滤波器单位脉冲响应 h(n) 的线性卷积，所以，对有限长序列 x(n) ，可以通过补零的方法延长 x(n) 和 h(n) 序列，然后计算它们的圆周卷积，从而得到FIR 系统的输出 y(n)。

    线性相位FIR滤波器的特性

        相位条件：
            满足偶对称条件的 FIR 滤波器分别称为 I型线性相位滤波器和II型线性相位滤波器
            满足奇对称条件的 FIR 滤波器分别称为 III 型线性相位滤波器和IV 型线性相位滤波器
        
        频率响应的特点
            如果滤波器的系数 h(n) 的长度为 N，且这些系数是关于 t =(N-1)/2 对称的，根据 h(n) 的奇偶对称性和 N 的奇偶性，线性相位 FIR 数字滤波器可以分为4种类型：
                I 型线性相位滤波器
                II 型线性相位滤波器
                III 型线性相位滤波器
                IV 型线性相位滤波器
            为了实现线性香味儿滤波器振幅响应，以下是用户自定义编写的 4种类型函数。
                I 型滤波器的幅度响应见 hr_type1.m
                II 型滤波器的幅度响应见 hr_type2.m
                III 型滤波器的幅度响应见 hr_type3.m
                IV 型滤波器的幅度响应见 hr_type4.m
        
        零点特性
            由四种类型线性相位滤波器可得，如果H(z) 在 z = z0 处等于零，则在 z = 1/z 出也一定等于零。所以 H(z) 的零点呈倒数对出现。另外，若 h(n) 是实值的，则复零点呈共轭倒数对出现，或者说是共轭镜像的。


    常用的窗函数法 FIR 滤波器设计
        通常希望所设计的滤波器具有理想的幅频和相频特性。由于理想滤波器在边界频率处不连续，故其时域信号 hd(n) 一定是无限时宽的，也是非因果的序列，所以理想低通滤波器是无法实现的。如果要实现一个具有理想线性相位特性的滤波器，其幅频特性只能采取理想幅频特性的方法实现。
        窗函数设计法的基本思路是用一个长度为N 的序列h(n) 替代 hd(n) 作为实际设计的滤波器的单位冲激响应，这种设计思想称为窗函数设计法。

        矩形窗
            在MATLAB中，实现矩形窗的函数为 boxcar 和 rectwin，其调用格式为
                w = boxcar(N);
                w = rectwin(N);
            其中，N是窗函数的长度，返回值w 是一个N阶的向量，它的元素由窗函数的值组成。其中 w = boxcar 等价于 w = ones(N,1)

        汉宁窗
            在MATLA中，实现汉宁窗的函数为 hanning 和 barthannwin，其调用格式为
                w = hanning(N);
                w = barthannwin(N); 
        
        海明窗
            在 MATLAB 中，实现海能窗的函数为 hamming，其调用格式为
                w = hamming(N)
            其中，N是窗函数的长度，返回值w 是一个长度为 N 的海明窗序列
        
        布莱克曼窗
            在MATLAB 中，实现布莱克曼窗的函数为 blackman，其调用格式如下：
                w = blackman(N);
            其中，N是窗函数的长度，返回值 w 是一个长度为N 的布莱克曼窗序列
        
        巴特窗
            在MATLAB 中，巴特窗函数为 bartlett ，调用格式为
                w = bartlett(L)
            
        凯塞窗
            在MATLAB中，实现凯塞窗的函数为 kaiser，其调用格式为
                w = kaiser(N,beta);
            在MATLAB 下设计标准响应FIR 滤波器可使用 fir1 函数，fir1函数以经典方法实现加窗线性相位 FIR 滤波器设计，它可以设计出标准的低通、带通、高通和带阻滤波器。fir1函数的用法为
                b = fir1(n,Wn,'ftype',Window)
            其中，b表示滤波器系数，n表示滤波器阶数,Wn 表示截止频率。当指定 ftype 时，可设计高通和带阻滤波器。ftype = high 时，设计高通FIR 滤波器，ftype = stop时设计带阻FIR滤波器。低通和带通FIR 滤波器无须输入 ftype 参数。Window 表示窗函数。窗函数的长度应等于FIR 滤波器系数个数，即阶数 n+1。
        
        窗函数设计法
            设计一个FIR 滤波器通常按下面步骤进行
                1. 根据滤波器设计要求指标，确定滤波器的过渡带宽和阻带衰减要求，选择窗函数的类型并估计窗的宽度N
                2. 根据所要求的理想滤波器求出单位脉冲响应 hd(n)
                3. 根据求得的 h(n) 求出其频率响应： H(e^jw) = sum(h(n)*e^-jwt) ~ （0~N-1）
                4. 根据频率响应验证是否满足技术指标
                5. 若不满足指标要求，则应调整窗函数的类型或长度，然后重复以上步骤，直到满足要求为止
        
    频率采样的FIR 滤波器的设计
        窗函数方法设计数字滤波器的问题如下
            优点：窗函数设计数字滤波器具有设计简单、方便实用的特点
            缺点：由于窗函数法是从时域出发的一种设计方法，它的设计思想是用理想滤波器的单位冲激响应作为滤波器系数。而理想单位冲激响应又不可实现，所以通过加窗截断而改善特性，故实际滤波器产生了与理想滤波器特性的偏差。
            改善办法：通过在时域改变截断方法和增加长度就可以使实际滤波器特性逼近理想滤波器。尤其在H(e^jw)比较复杂时，其单位冲激响应需要通过采样求 IDFT 得到。
        另一方面，面的设计实际上设计过程绕了一个圈子。那么能不能直接将要设计的滤波器特性的采样点给出并由此求得滤波器系数，这样就引出了频率采样设计法。
        



    IIR 滤波器能够保留一些模拟滤波器的优良特性，例如具有良好的幅频特性，但是其相位是非线性的。
    FIR 数字滤波器可以设计成严格线性相位的，避免被处理信号产生相位失真。


                 

            

                