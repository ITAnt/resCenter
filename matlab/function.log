real()  % 实部

imag()  % 虚部

angle()     % 相位

heaviside() %阶跃函数

fliplr()    % 翻转
rectpuls()  % 矩阵波
tripuls()   % 三角波

% 信号的奇偶分解
f = sym('cos(t+1)+t');
f1 = subs(f,t,-t);
g = 1/2 *(f+f1);    % 偶分量
h = 1/2 *(f-f1);    % 奇分量

信号的积分和微分
    连续信号
        diff(function,'variable',n)     % 微分
            function：信号
            variable：独立变量
            n：求导的阶数

        int(function,'variable',a,b)      % 积分
            a: 积分上限
            b：积分下限

卷积
    conv()
    conv2()
    convn()

信号波的产生

    线性调频扫频信号函数
        chirp(t,f0,t1,f1,'method',phi,'shape')
            产生一个线性（频率随时间线性变化）信号，其时间轴设置由数组 t 定义。时刻 0 的瞬间频率为f0,时刻t1的瞬间频率为f1。默认情况，f0=0Hz,t1 =1,f1 = 100Hz
            method：
                指定改变扫频的方法。默认时为 linear
                linear 线性扫频
                quadratic：二次扫频
                logarithmic：对数扫频 ，必须有 f1>f0
            phi:
                指定信号的初始相位为 phi(单位为度)，默认时 phi =0。
            shape:
                指定二次扫频方法的抛物线的形状是凹还是凸，值为 concave 或 convex。
    
    方波信号产生
        square 函数可以得到方波函数。
            square(t,duty)：产生一个 2*pi 为周期的方波，范围为 -1 到 1 之间，占空比为50%。很像sin函数，比如sin函数输入pi/6 就是1/2，输入pi/2 就是1，输入pi就是0，输入3/2*pi就是-1；而square也是一样，输入的数小于pi，就是1，大于pi小于2*pi就是-1。
                duty：duty是一个百分数,duty = 75(75%的占空比），用于指定脉冲宽度与整个周期的比例。

随机函数与三角波函数
    rand(m,n)：返回一个 m X n 的随机矩阵。

    sawtooth()：用于产生锯齿波或三角波信号
        sawtooth(t)：产生周期为 2pi，振幅为 -1 到 1 的锯齿波。在 2pi 的整数倍处值为 -1 到1，这一段波形斜率为 1/pi。
        sawtooth(t,width)：产生三角波，width 在 0到1之间。


rectpuls 函数与 diric 函数

    rectpuls()：产生非周期方波信号函数
        rectpuls(t,w)：产生指定宽度为 w 的非周期方波
    
    diric()：用于产生 Dirichlet 函数或周期 Sinc 函数
        diric(x,n)：返回一大小与 x 相同的矩阵，其元素为 Dirichlet 函数
    
sinc 函数与 tripuls 函数
    sinc(x)：返回一个有 sinc 函数值为元素的矩阵。
    
    tripuls()：用于产生非周期三角波信号
        tripuls(t,w,s)：产生周期为 w 的非周期方波，斜率为 s（-1<s<1）

gauspuls 函数与 pulstran 函数
    guaspuls()：用于产生高斯正弦脉冲信号函数
        guaspuls(T,FC,BW,BWR):产生幅度为1 的高斯正弦脉冲（RF）信号的抽样
            T ：持续时间
            FC: 中心频率
            BW: 宽带
        
        TC = guaspuls('cutoff',FC,BE,BER,TPB):返回按参数 TEP(dB) 计算所对应的截断时间TC
    
    pulstran() 用于脉冲序列发生器
        pulstran(t,d,'func'):该函数基于一个名为 func 的连续函数并以之为一个周期，从而产生一串周期性的连续函数(func 函数可自定义)。pulstran 函数的横坐标范围有向量 t 指定，而向量 d 用于指定周期性的偏移量（即各个周期的中心点），这样这个 func 函数会被计算 length(d) 次，从而产生一个周期性脉冲信号。
        pulstran 函数的一个调用形式为 y = pulstran(t,d,'func',p1,p2,...)：p1,p2,... 为需要传送给 func 函数的额外输入参数值（除了变量t 之外）。

    

连续时间系统的时域分析

    连续时间系统的零状态与零输入响应的求解分析

        连续时间系统可以用常系数微分方程来描述，其完全响应由零输入响应和零状态响应组成。MATLAB 符号工具箱提供了 dsolve 函数，可以实现对常系数微分方程的符号求解，其调用格式为:
            dsolve('eq1,eq2,...','cond1,cond2,...','v')
                eq：表示各个微分方程
                cond：表示初始条件或者起始条件
                v: 表示自变量，默认是变量 t
            通过使用 dsolve 函数可以求出系统微分方程的零输入响应和零状态响应，进而求出完全响应。
    
    
    连续时间系统数值求解
        用于求解零初始条件微分方程数值解的函数 lsim，输入信号为 f
            lsim(sys,f,t);
                t：表示计算系统响应的抽样点向量
                f：系统输入信号向量
                sys：是 LTI 系统模型，用来表示微分方程、差分方程或状态方程。
                    sys = tf(b,a);
                        b 和 a 分别是微分方程的右端和左端系数向量。
        
    连续时间系统冲激响应和阶跃响应分析
        求解冲激响应可用 impulse 
            调用形式：
                impulse(sys,t);
        求解阶跃响应可用 step
            调用形式
                step(sys,t);
    
    连续时间系统卷积求解
        f = conv(f1,f2)*dt;
            
描述一个线性时不变离散时间系统，有如下两种常用方法：
    1. 用单位冲激响应来表征系统
    2. 用差分方程来描述系统输入与输出之间的关系。


离散时间系统响应
    函数 filter 可以用来对差分方程在指定时间范围内的输入序列所产生的响应进行求解，该函数的调用方法如下
        y = filter(b,a,x);
        [Y,Zf] = filter(b,a,x,zi)
        filter(b,a,x,[],dim)
            b：差分方程右端
            a：差分方程左端
            x：输入的离散序列
            zi: 指定X的初始状态，Zf为最终状态矢量
            dim: 指定的 x 的维数 DIM 进行操作
            y：输出的离散序列
    
    函数 impz() 函数用于求解离散时间系统单位冲激响应。
        调用形式：h = impz(b,a,k);
            a、b: 差分方程左、右端的系数向量
            k：表示输出序列的取值范围(可省略)
            h: 系统单位冲激响应（如果没有输出参数，直接调用 impz(b,a,k)，则 MATLAB将会在当前绘图窗口中自动画出系统单位冲激响应的图形）
    
    离散时间信号的卷积和运算
        conv() 函数用于计算两个离散序列卷积和的函数，其调用形式为
            c = conv(a,b)
            a、b 分别为待卷积的两序列的向量表示，c 是卷积结果。


变换
    Z变换的函数 ztrans() 和 Z 反变换的函数 iztrans()，其调用形式为
        F = ztrans(f);
        f = iztrans(F);
            右端的 f和 F分别为时域表示式和 Z域表示的符号表示，可应用函数 sym 来实现，其调用形式为：
                S = sym(A)
        
    留数法求 Z 反变换可以使用函数 residuez() 实现，调用格式为
        [R P K] = residuez(B,A);

        B和A 分别为X(z) 的多项式中分子多项式和分母多项式的系数向量
        返回值：
            R ：留数向量
            P ：极点向量
            K ：直接项系数，仅在分子多项式最高次幂大于等于分母多项式最高次幂时存在，否则，返回值为空。

离散系统函数频域分析
    利用MATLAB 来求解频率响应的过程如下：
        1. 根据系统函数 H(z)定义分子、分母多项式系数向量B 和 A
        2. 调用前述的 ljdt() 函数求出 H(z) 的零极点，并绘出零极点图
        3. 定义 z 平面单位圆上的 k 个频率分点
        4. 求出 H(z) 所有的零点和极点到这些等分点的距离
        5. 求出 H(z) 所有的零点和极点到这些等分点矢量的相角
        6. 求出系统的｜H(e^jw)｜ 和 相位
        7. 绘制指定范围内系统的幅频曲线和相频曲线

        在 MATLAB 中，函数 freqz 用于求离散时间系统频响特性，该函数的调用方法如下：
            [H,W] = freqz(B,A,N);
            [H,W] = freqz(B,A,N,'whole')

            B 与 A 分别表示 H(z)的分子与分母多项式的系数向量
            N 为正整数，默认值为 512
            W 包含 [0,pi] 范围内的N个频率等分点
            H 离散时间系统频率响应 H(e^jw) 在 0～pi 范围内N的频率处对应的值
        
    
离散系统函数零点分析
    在MATLAB 中，系统函数的零极点就可以通过函数 roots 得到，也可以借助函数 tf2zp 得到
        roots(A)：求系统的极点
        roots(B)：求系统的零点

        [Z,P,K] = tf2zp(B,A)： 将 H(z) 的有理式表示为转换为零极点增益形式。 
            B 与 A 分别表示为 H(z) 的分子与分母多项式的系数向量

        zplane() 函数用于绘制 H(z) 的零极点图，调用格式为
            zplane(z,p)
            绘制出列向量 z 中的零点（以符号"o"表示）和列向量 p 中的极点(以符号"X"表示)，以及参考单位圆，在多阶零点和极点的右上角标出其阶数。如果z 和p 为矩阵，则会以不同颜色绘出 z 和 p 各列中的零点和极点。

离散系统差分函数求解
    差分方程的解也分为通解与特解，通解是与方程初始状态有关的解，特解与外部输入有关，它描述系统在外部输入作用下的强迫运动。

    filtic(): 为滤波器的直接实现选择初始条件

    https://blog.csdn.net/wangming520liwei/article/details/29816075

离散的傅立叶变换
    在实际数据处理中，k 一般取 N/2，此时波的周期最小，获得的频率范围最大，所以想要获得高频率的信号，就需要缩短取样间隔。

    dftmtx(n) 返回 nxn 的复杂离散傅立叶变换矩阵。
        x = rand(1,Nfft);
        y = dftmtx(Nfft)*x  和 y = fft(x) 是等价的
    
    示例
        xn = sin(100*2*pi*t);
        N = length(xn);
        WNnk = dftmtx(N);
        Xk = xn * WNnk;
        y = fft(xn);

    频率域采样
        频率响应的混叠失真
            N  = fs/f0 >(2fh)/f0,这是实现DFT 算法必须满足的最低条件。如果不满足该条件，则会产生频域响应的周期延拓分量重叠现象，即频率响应的混叠失真。
        
        频谱泄露
            实际情况下，我们取的信号都是有限长的，即对原始序列做加窗处理使其成为有限长，时域的乘积对应频域的卷积，造成频谱的泄漏。
            减小泄漏的方法：可以取更长的数据（与原始数据就越相近），缺点运算量加大；可以选择窗的形状，从而使窗谱的旁瓣能量更小。
        
        栅栏效应
            DFT 上看到的谱线都是离散的，而从序列的傅立叶变换知道谱线是连续的，所以相当于看到谱的一些离散点，而不是全部，感觉像是透过栅栏看到的情景，称为栅栏效应。
        
        频率分辨率
            增加分辨率只有通过加大取样点 N，但不是补零的方式来增加 N,因为补零不是原始信号的有效信号。

快速傅立叶变换
    快速傅立叶变换是傅立叶变换的一种快速算法，简称为 fft,采用这种算法能大大减少计算离散傅立叶变换所需要的乘法次数，特别是被变换的抽样点数 N 越多，FFT 算法计算量的节省就越显著。
    根据对称性和周期性，可分为两类
        时间抽取法
        频率抽取法
    
    基于2时分的FFT算法

    基于2频分的FFT算法

    快速傅立叶变换的MATLAB实现

        fft(x,n)
            x ：取样的样本，可以是一个向量，也可以是一个矩阵
            y : x 的快速傅立叶变换
            n : 通过改变 n 值来直接对样本进行补零或者截断的操作（n省略，实际操作中，会对 x 进行补零操作，使 x 的长度等于 2 的整数次幂，这样能提高程序的计算速度）
        y = ifft(X)：用来计算序列的逆傅立叶变换。
            x : 需要进行逆变换的信号
            y : 为快速傅立叶反变换的输出 


离散余弦变换
    在傅立叶级数展开式中，如果被展开的函数是实偶函数，那么其傅立叶级数中只包含余弦项，再将其离散化可导出余弦变换，因此称之为离散余弦变换。
    在 MATLAB 中，dct 函数用于进行 DCT 变换，该函数的调用方法如下：
        y = dct(x): 返回序列 x 的DCT 结果
    dict2 函数用于 DCT  反变换，该函数调用方法为
        B = dict2(A)：计算 A 的 DCT 反变换B，A与 B的大小相同
    

Chirp Z变换
    系统的单位冲激响应 h(n) = W^(-n^2/2)与频率随时间成线性增加的线性调频信号相似，因此称为 Chirp-Z 变换。
    在 MATLAB 中，czt 函数用于实现 Chirp-Z 变换，该函数的调用方式如下：
        y = czt(x,m,w,a);
        此函数计算由  z = a*w.^(-(0:m-1)) 定义的 z 平面螺旋线上各点的 Z 变换,a 规定了起点，w规定了相邻点的比例，m 规定了变换的长度，后 3 个变量默认值为 a=1,w = exp(j*2*pi/m) 及 m = length(x),因此 y =czt(x) 就等于 y =fft(x)
    
Gabor 函数
    Gabor 变换属于加窗傅立叶变换，Gabor 函数可以在频域不同尺度、不同方向上提取相关的特征。另外 Gabor 函数与人眼的生物作用相仿，所以经常用作纹理识别上，并取得了较好的效果。

    Gabor展开
        用过采样的 Gabor 展开来检测瞬时信号，效果要比传统的方法好。Gabor展开固有的局部化特性，使它特别适合于描述瞬时信号，可选择单边指数窗作为Gabor 展开的窗函数，与瞬时信号的非对称性及突变性相适应。
        利用 Gabor 展开，得到观测信号展开后的系统，就可以用其系数啦检测瞬时信号的存在。



经典傅立叶变换只能反映信号的整体特性（时域、频域）。对信号的齐性不敏感，不能给出在各个局部时间范围内部频谱上的谱信息描述。